@model AgileRap_Process.Models.Work

<style>
    .table th {
        background-color: #FF7F50;
        color: #fff;
    }
</style>

@{
    var selectedWork = ViewBag.selectedWork as AgileRap_Process.Models.Work;
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
}
<tr>

    @* <input hidden asp-for="ProviderValue" id="ProviderValue" /> *@
    @* <input hidden asp-for="areAllSelected" id="areAllSelected" /> *@

    @Html.HiddenFor(m => m.ProviderValue)
    @Html.HiddenFor(m => m.areAllSelected)

    @if(Model.DueDate == null)
    {
        if (Model.CreateDate.HasValue && Model.CreateDate.Value < DateTime.Now.AddDays(-1))
        {
            <td style="background-color:#F08080">
                @Html.DisplayFor(m => m.CreateDate)
            </td>
            <td style="background-color:#F08080">
                @Html.EditorFor(m => m.Project, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            </td>
            <td style="background-color:#F08080">
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            </td>
            <td style="background-color:#F08080">
                @Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { @class = "form-control" } })
            </td>
            <td style="background-color:#F08080">
                @foreach (var user in ViewBag.user as IEnumerable<AgileRap_Process.Models.User>)
                {
                    @if (Model.CreateBy == user.ID)
                    {
                        @Html.DisplayFor(m => user.Name)

                    }
                }
            </td>

            <td style="background-color:#F08080">
                <select id="select-tops-options" required multiple="multiple">
                    @foreach (var user in ViewBag.user as IEnumerable<AgileRap_Process.Models.User>)
                    {
                        var isSelected = selectedWork.Provider.Any(m => m.UserID == user.ID);
                        <option value="@user.ID" selected="@isSelected">@user.Name</option>
                    }
                </select>
            </td>
            <td style="background-color:#F08080">

                @Html.DropDownListFor(m => m.StatusID, new SelectList(ViewBag.status, "ID", "StatusName", selectedWork.Status.StatusName), new { @class = "form-control custom-dropdown" })

                @* @Html.EditorFor(m => m.Status)    *@
            </td>

            <td style="background-color:#F08080">
                @Html.EditorFor(m => m.Remark, new { htmlAttributes = new { @class = "form-control" } })

            </td>

            <td>
                <input class="btn btn-primary" type="submit" value="Save" style="" />
                @Html.ActionLink("Cancel", "Index", new { }, new { @class = "btn btn-danger" })
            </td>
        }
        else
        {
            <td>
                @Html.DisplayFor(m => m.CreateDate)
            </td>
            <td>
                @Html.EditorFor(m => m.Project, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            </td>
            <td>
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            </td>
            <td>
                @Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { @class = "form-control" } })
            </td>
            <td>
                @foreach (var user in ViewBag.user as IEnumerable<AgileRap_Process.Models.User>)
                {
                    @if (Model.CreateBy == user.ID)
                    {
                        @Html.DisplayFor(m => user.Name)

                    }
                }
            </td>

            <td>
                <select id="select-tops-options" required multiple="multiple">
                    @foreach (var user in ViewBag.user as IEnumerable<AgileRap_Process.Models.User>)
                    {
                        var isSelected = selectedWork.Provider.Any(m => m.UserID == user.ID);
                        <option value="@user.ID" selected="@isSelected">@user.Name</option>
                    }
                </select>
            </td>
            <td>

                @Html.DropDownListFor(m => m.StatusID, new SelectList(ViewBag.status, "ID", "StatusName", selectedWork.Status.StatusName), new { @class = "form-control custom-dropdown" })

                @* @Html.EditorFor(m => m.Status)    *@
            </td>

            <td>
                @Html.EditorFor(m => m.Remark, new { htmlAttributes = new { @class = "form-control" } })

            </td>

            <td>
                <input class="btn btn-primary" type="submit" value="Save" style="" />
                @Html.ActionLink("Cancel", "Index", new { }, new { @class = "btn btn-danger" })
            </td>
        }
    }
    else
    {
        <td>
            @Html.DisplayFor(m => m.CreateDate)
        </td>
        <td>
            @Html.EditorFor(m => m.Project, new { htmlAttributes = new { @class = "form-control", required = "required" } })
        </td>
        <td>
            @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control", required = "required" } })
        </td>
        <td>
            @Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { @class = "form-control" } })
        </td>
        <td>
            @foreach (var user in ViewBag.user as IEnumerable<AgileRap_Process.Models.User>)
            {
                @if (Model.CreateBy == user.ID)
                {
                    @Html.DisplayFor(m => user.Name)

                }
            }
        </td>

        <td>
            <select id="select-tops-options" required multiple="multiple">
                @foreach (var user in ViewBag.user as IEnumerable<AgileRap_Process.Models.User>)
                {
                    var isSelected = selectedWork.Provider.Any(m => m.UserID == user.ID);
                    <option value="@user.ID" selected="@isSelected">@user.Name</option>
                }
            </select>
        </td>
        <td>
            @Html.DropDownListFor(m => m.StatusID, new SelectList(ViewBag.status, "ID", "StatusName", selectedWork.Status.StatusName), new { @class = "form-control custom-dropdown" })


        </td>


        <td>
            @Html.EditorFor(m => m.Remark, new { htmlAttributes = new { @class = "form-control" } })

        </td>

        <td>
            <input class="btn btn-primary" type="submit" value="Save" style="" />
            @Html.ActionLink("Cancel", "Index",new{ }, new { @class = "btn btn-danger" })
        </td>
    }
    

</tr>
<script>
    document.addEventListener("DOMContentLoaded",
        () => {
            $('#select-tops-options').multiselect({
                buttonClass: 'form-select',
                nonSelectedText: 'Select',
                buttonContainer: '<div class="btn-danger" id="select-tops-options-container"></div>',
                selectedClass: 'active multiselect-selected',
                numberDisplayed: 5,
                buttonWidth: '18em',
                includeSelectAllOption: true,
                onSelectAll: function (options) {
                    document.getElementById("areAllSelected").value = true;
                },
                onDeselectAll: function (options) {
                    document.getElementById("areAllSelected").value = false;
                },
                //includeResetOption: true,
                //selectAllName: 'select-all-name',
                onChange: function (option, checked) {
                    /*
                     * Not there yet
                     */
                    if (checked) {
                        document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "true";
                        document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "true";
                    } else {
                        document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[1].ariaChecked = "false";
                        document.querySelectorAll(`[value="${$(option[0])[0].value}"]`)[0].ariaChecked = "false";
                    }

                    //$("#select-tops-options").multiselect('deselect', '1');
                    var toppings = $('#select-tops-options option:selected');

                    var selected = [];
                    $(toppings).each(function (index, item) {
                        selected.push([$(this).val()]);
                    });

                    document.getElementById("ProviderValue").value = selected.join(',');

                },
                templates: {
                    button:
                        '<button type="button" class="multiselect dropdown-toggle" ' +
                        'data-bs-toggle="dropdown"><span class="multiselect-selected-text"></span></button>',
                    resetButton: '<div class="multiselect-reset text-center p-2"><button type="button" class="btn btn-sm btn-danger"></button></div>'
                }
            });

        });
</script>
<script>
    function cancelButtonClick() {
        document.getElementById("cancelForm").submit();
    }
</script>

